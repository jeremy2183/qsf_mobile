(function () {
	
	var tradOne = Math.floor(tradingVolume[0] / 1000);
	var tradTwo = Math.floor(tradingVolume[1] / 1000);
	var tradThree = Math.floor(tradingVolume[2] / 1000);
	
	setTimeout (function () {
		$('#topOneScore').each(function () {
			$(this).prop('Counter', 0).animate({
				Counter: tradOne
			}, {
				duration: 1000,
				easing: 'swing',
				step: function (now) {
					$(this).text(Math.ceil(now));
				}
			});
		});
		$('#topTwoScore').each(function () {
			$(this).prop('Counter', 0).animate({
				Counter: tradTwo
			}, {
				duration: 1000,
				easing: 'swing',
				step: function (now) {
					$(this).text(Math.ceil(now));
				}
			});
		});
		$('#topThreeScore').each(function () {
			$(this).prop('Counter', 0).animate({
				Counter: tradThree
			}, {
				duration: 1000,
				easing: 'swing',
				step: function (now) {
					$(this).text(Math.ceil(now));
				}
			});
		});

		var oneNum = tradingVolume[0] / (tradingVolume[0] + surplusVolume[0]) * 439;
		var twoNum = tradingVolume[1] / (tradingVolume[1] + surplusVolume[1]) * 439;
		var threeNum = tradingVolume[2] / (tradingVolume[2] + surplusVolume[2]) * 439;

		$('#one_value').attr('stroke-dashoffset', oneNum + 439);
		$('#two_value').attr('stroke-dashoffset', twoNum + 439);
		$('#three_value').attr('stroke-dashoffset', threeNum + 439);
		
		$('#oneEnd').attr('stroke-dashoffset', oneNum + 439);
		$('#twoEnd').attr('stroke-dashoffset', twoNum + 439);
		$('#threeEnd').attr('stroke-dashoffset', threeNum + 439);

	}, 10);
	
})();


